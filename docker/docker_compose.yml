version: '3.8'

services:
  pidanos:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: pidanos:latest
    container_name: pidanos
    hostname: pidanos
    restart: unless-stopped
    
    # Network mode - choose one:
    # Option 1: Bridge mode (recommended for testing)
    network_mode: bridge
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8080:8080"  # Web interface
      - "8081:8081"  # API
    
    # Option 2: Host mode (for production)
    # network_mode: host
    
    cap_add:
      - NET_ADMIN
      - NET_BIND_SERVICE
      - SYS_TIME
    
    environment:
      - TZ=UTC
      - PIDANOS_LOG_LEVEL=INFO
      - PIDANOS_DNS_PORT=53
      - PIDANOS_WEB_PORT=8080
      - PIDANOS_API_PORT=8081
      - PIDANOS_UPSTREAM_DNS=1.1.1.1,8.8.8.8
    
    volumes:
      # Configuration
      - ./config:/etc/pidanos:ro
      - pidanos_data:/var/lib/pidanos
      - pidanos_logs:/var/log/pidanos
      
      # Optional: Custom blocklists
      # - ./custom/blocklists:/opt/pidanos/custom/blocklists:ro
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: PostgreSQL database (instead of SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: pidanos_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pidanos
      - POSTGRES_USER=pidanos
      - POSTGRES_PASSWORD=changeme
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pidanos"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: pidanos_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - redis

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pidanos_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pidanos_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  pidanos_data:
    driver: local
  pidanos_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16